%% TCCs associated with theory heapsort
%% This file was automatically generated by PVS, please **do not modify** by hand.
heapsort_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 37, column 8) for  n - i
	% expected type  naturalnumber
	  % proved
	sink_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], (i: below[h`length]),
	          (n: below[h`length] | n >= i)):
	    n - i >= 0
	
	% Subtype TCC generated (at line 34, column 16) for  k
	% expected type  below[length(h)]
	  % proved
	sink_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T], (i: below[h`length]),
	          (n: below[h`length] | n >= i)):
	    NOT i > floor((n + 1) / 2) - 1 IMPLIES
	     FORALL (k: nat): k = ind_gc(h)(n, i) IMPLIES k < h`length
	
	% Subtype TCC generated (at line 34, column 50) for  k
	% expected type  below[length(swap(h)(i, k))]
	  % proved
	sink_TCC3: OBLIGATION
	FORALL (h: finite_sequence[T], (i: below[h`length]),
	          (n: below[h`length] | n >= i)):
	    NOT i > floor((n + 1) / 2) - 1 IMPLIES
	     FORALL (k: nat):
	       k = ind_gc(h)(n, i) AND gt(finseq_appl[T](h)(k), finseq_appl[T](h)(i))
	        IMPLIES k < swap[T, leq](h)(i, k)`length
	
	% Subtype TCC generated (at line 34, column 52) for  n
	% expected type  {n: below[length(swap(h)(i, k))] | n >= k}
	  % proved
	sink_TCC4: OBLIGATION
	FORALL (h: finite_sequence[T], (i: below[h`length]),
	          (n: below[h`length] | n >= i)):
	    NOT i > floor((n + 1) / 2) - 1 IMPLIES
	     FORALL (k: nat):
	       k = ind_gc(h)(n, i) AND gt(finseq_appl[T](h)(k), finseq_appl[T](h)(i))
	        IMPLIES n < swap[T, leq](h)(i, k)`length AND n >= k
	
	% Termination TCC generated (at line 34, column 31) for
	% sink(swap(h)(i, k))(k, n)
	  % proved
	sink_TCC5: OBLIGATION
	FORALL (h: finite_sequence[T], (i: below[h`length]),
	          (n: below[h`length] | n >= i)):
	    NOT i > floor((n + 1) / 2) - 1 IMPLIES
	     FORALL (k: nat):
	       k = ind_gc(h)(n, i) AND gt(finseq_appl[T](h)(k), finseq_appl[T](h)(i))
	        IMPLIES n - k < n - i
	
	% Subtype TCC generated (at line 33, column 27) for  i
	% expected type  {i: below[1 + n] | is_parent(h)(n, i)}
	  % proved
	sink_TCC6: OBLIGATION
	FORALL (h: finite_sequence[T], (i: below[h`length]),
	          (n: below[h`length] | n >= i)):
	    NOT i > floor((n + 1) / 2) - 1 IMPLIES
	     i < 1 + n AND is_parent[T, leq](h)(n, i)
	
	% The subtype TCC (at line 34, column 46) in decl nil for
	% term generated from sink  k
	% expected type  below[h`length]
	% Subtype TCC generated (at line 42, column 24) for  i
	% expected type  below[length(h)]
	  % proved
	sink_permutes_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], (i: nat), (n: nat | n < h`length AND n >= i)):
	    i < h`length
	
	% The subtype TCC (at line 34, column 46) in decl nil for
	 % term generated from sink  k
	    % expected type  below[h`length]
	  % is subsumed by sink_TCC2
	
	% The subtype TCC (at line 54, column 15) in decl nil for
	% term generated from sink_length  i
	% expected type  below[h`length]
	% Subtype TCC generated (at line 58, column 23) for  k
	% expected type  below[length((sink(h)(i, n)))]
	  % proved
	sink_stable_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], (i: nat), (n: nat | n < h`length AND n >= i),
	          (k: below[h`length] | k < i OR k > n)):
	    k < (sink(h)(i, n))`length
	
	% The subtype TCC (at line 54, column 15) in decl nil for
	 % term generated from sink_length  i
	    % expected type  below[h`length]
	  % is subsumed by sink_permutes_TCC1
	
	% The subtype TCC (at line 58, column 17) in decl nil for
	% term generated from sink_stable  i
	% expected type  below[h`length]
	% Subtype TCC generated (at line 62, column 23) for  k
	% expected type  below[length((sink(h)(i, n)))]
	  % proved
	sink_in_stable_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], (i: nat), (n: nat | n < h`length AND n >= i),
	          (k: below[h`length] | k >= i AND k <= n),
	          l: below[h`length] | l >= i AND l <= n):
	    k < (sink(h)(i, n))`length
	
	% The subtype TCC (at line 58, column 17) in decl nil for
	 % term generated from sink_stable  i
	    % expected type  below[h`length]
	  % is subsumed by sink_permutes_TCC1
	
	% The subtype TCC (at line 62, column 17) in decl nil for
	% term generated from sink_in_stable  i
	% expected type  below[h`length]
	% Subtype TCC generated (at line 67, column 20) for  k
	% expected type  {i: below[length(h)] | i <= n}
	  % proved
	sink_interval_children_stable_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], (i: posnat),
	          (n: nat | n < h`length AND n >= i),
	          (k: below[h`length] | k < i AND k > ind_parent[T, leq](i)),
	          sh: finite_sequence[T]):
	    sh = sink(h)(i, n) IMPLIES k <= n
	
	% The subtype TCC (at line 62, column 17) in decl nil for
	 % term generated from sink_in_stable  i
	    % expected type  below[h`length]
	  % is subsumed by sink_permutes_TCC1
	
	% Subtype TCC generated (at line 68, column 30) for  ind_lc(k)
	% expected type  below[length(h)]
	  % proved
	sink_interval_children_stable_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T], (i: posnat),
	          (n: nat | n < h`length AND n >= i),
	          (k: below[h`length] | k < i AND k > ind_parent[T, leq](i)),
	          sh: finite_sequence[T]):
	    sh = sink(h)(i, n) AND is_parent(h)(n, k) AND one_child(h)(n, k) IMPLIES
	     ind_lc[T, leq](k) < h`length
	
	% Subtype TCC generated (at line 68, column 47) for  ind_lc(k)
	% expected type  below[length(sh)]
	  % proved
	sink_interval_children_stable_TCC3: OBLIGATION
	FORALL (h: finite_sequence[T], (i: posnat),
	          (n: nat | n < h`length AND n >= i),
	          (k: below[h`length] | k < i AND k > ind_parent[T, leq](i)),
	          sh: finite_sequence[T]):
	    sh = sink(h)(i, n) AND is_parent(h)(n, k) AND one_child(h)(n, k) IMPLIES
	     ind_lc[T, leq](k) < sh`length
	
	% Subtype TCC generated (at line 70, column 8) for  ind_lc(k)
	% expected type  below[length(h)]
	  % proved
	sink_interval_children_stable_TCC4: OBLIGATION
	FORALL (h: finite_sequence[T], (i: posnat),
	          (n: nat | n < h`length AND n >= i),
	          (k: below[h`length] | k < i AND k > ind_parent[T, leq](i)),
	          sh: finite_sequence[T]):
	    sh = sink(h)(i, n) AND
	     is_parent(h)(n, k) AND
	      NOT (one_child(h)(n, k) AND
	            finseq_appl[T](h)(ind_lc(k)) = finseq_appl[T](sh)(ind_lc(k)))
	       AND both_childs(h)(n, k)
	     IMPLIES ind_lc[T, leq](k) < h`length
	
	% Subtype TCC generated (at line 70, column 24) for  ind_lc(k)
	% expected type  below[length(sh)]
	  % proved
	sink_interval_children_stable_TCC5: OBLIGATION
	FORALL (h: finite_sequence[T], (i: posnat),
	          (n: nat | n < h`length AND n >= i),
	          (k: below[h`length] | k < i AND k > ind_parent[T, leq](i)),
	          sh: finite_sequence[T]):
	    sh = sink(h)(i, n) AND
	     is_parent(h)(n, k) AND
	      NOT (one_child(h)(n, k) AND
	            finseq_appl[T](h)(ind_lc(k)) = finseq_appl[T](sh)(ind_lc(k)))
	       AND both_childs(h)(n, k)
	     IMPLIES ind_lc[T, leq](k) < sh`length
	
	% Subtype TCC generated (at line 71, column 8) for  ind_rc(k)
	% expected type  below[length(h)]
	  % proved
	sink_interval_children_stable_TCC6: OBLIGATION
	FORALL (h: finite_sequence[T], (i: posnat),
	          (n: nat | n < h`length AND n >= i),
	          (k: below[h`length] | k < i AND k > ind_parent[T, leq](i)),
	          sh: finite_sequence[T]):
	         (sh = sink(h)(i, n)) AND is_parent(h)(n, k)
	     AND (NOT (one_child(h)(n, k) AND
	                finseq_appl[T](h)(ind_lc(k)) = finseq_appl[T](sh)(ind_lc(k))))
	     AND both_childs(h)(n, k)
	     AND (finseq_appl[T](h)(ind_lc(k)) = finseq_appl[T](sh)(ind_lc(k)))
	     IMPLIES ind_rc[T, leq](k) < h`length
	
	% Subtype TCC generated (at line 71, column 25) for  ind_rc(k)
	% expected type  below[length(sh)]
	  % proved
	sink_interval_children_stable_TCC7: OBLIGATION
	FORALL (h: finite_sequence[T], (i: posnat),
	          (n: nat | n < h`length AND n >= i),
	          (k: below[h`length] | k < i AND k > ind_parent[T, leq](i)),
	          sh: finite_sequence[T]):
	         (sh = sink(h)(i, n)) AND is_parent(h)(n, k)
	     AND (NOT (one_child(h)(n, k) AND
	                finseq_appl[T](h)(ind_lc(k)) = finseq_appl[T](sh)(ind_lc(k))))
	     AND both_childs(h)(n, k)
	     AND (finseq_appl[T](h)(ind_lc(k)) = finseq_appl[T](sh)(ind_lc(k)))
	     IMPLIES ind_rc[T, leq](k) < sh`length
	
	% The subtype TCC (at line 66, column 17) in decl nil for
	% term generated from sink_interval_children_stable  i
	% expected type  below[h`length]
	% The subtype TCC (at line 68, column 21) in decl nil for
	% term generated from sink_interval_children_stable  k
	% expected type  {i: below[h`length] | i <= n}
	% The subtype TCC (at line 69, column 23) in decl nil for
	% term generated from sink_interval_children_stable  k
	% expected type  {i: below[h`length] | i <= n}
	% Subtype TCC generated (at line 79, column 19) for  i + 1
	% expected type  below[length(h)]
	  % proved
	is_heap_from_to_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], (i: nat), (j: below[h`length] | i < j)):
	    i + 1 < h`length
	
	% The subtype TCC (at line 66, column 17) in decl nil for
	 % term generated from sink_interval_children_stable  i
	    % expected type  below[h`length]
	  % is subsumed by sink_permutes_TCC1
	% The subtype TCC (at line 68, column 21) in decl nil for
	 % term generated from sink_interval_children_stable  k
	    % expected type  {i: below[h`length] | i <= n}
	  % is subsumed by sink_interval_children_stable_TCC1
	% The subtype TCC (at line 69, column 23) in decl nil for
	 % term generated from sink_interval_children_stable  k
	    % expected type  {i: below[h`length] | i <= n}
	  % is subsumed by sink_interval_children_stable_TCC1
	
	% Subtype TCC generated (at line 79, column 23) for  j
	% expected type  {j: below[length(h)] | 1 + i <= j}
	  % proved
	is_heap_from_to_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T], (i: nat), (j: below[h`length] | i < j)):
	    1 + i <= j
	
	% Subtype TCC generated (at line 80, column 37) for  i
	% expected type  below[length(sink(h)(i, j))]
	  % proved
	is_heap_from_to_TCC3: OBLIGATION
	FORALL (h: finite_sequence[T], (i: nat), (j: below[h`length] | i < j)):
	    is_p_heap(h)(i + 1, j) IMPLIES i < sink(h)(i, j)`length
	
	% Subtype TCC generated (at line 80, column 39) for  j
	% expected type  {j_1: below[length(sink(h)(i, j))] | i <= j_1}
	  % proved
	is_heap_from_to_TCC4: OBLIGATION
	FORALL (h: finite_sequence[T], (i: nat), (j: below[h`length] | i < j)):
	    is_p_heap(h)(i + 1, j) IMPLIES j < sink(h)(i, j)`length AND i <= j
	
	% Subtype TCC generated (at line 80, column 31) for  i
	% expected type  below[length(h)]
	  % proved
	is_heap_from_to_TCC5: OBLIGATION
	FORALL (h: finite_sequence[T], (i: nat), (j: below[h`length] | i < j)):
	    is_p_heap(h)(i + 1, j) IMPLIES i < h`length
	
	% Subtype TCC generated (at line 80, column 33) for  j
	% expected type  {n: below[length(h)] | n >= i}
	  % proved
	is_heap_from_to_TCC6: OBLIGATION
	FORALL (h: finite_sequence[T], (i: nat), (j: below[h`length] | i < j)):
	    is_p_heap(h)(i + 1, j) IMPLIES j >= i
	
	% Subtype TCC generated (at line 84, column 31) for  i
	% expected type  below[length(h)]
	  % proved
	heapify_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], i: nat | i <= floor(h`length / 2) - 1):
	    i > 0 IMPLIES i < h`length
	
	% Subtype TCC generated (at line 84, column 34) for  length(h) - 1
	% expected type  {n: below[length(h)] | n >= i}
	  % proved
	heapify_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T], i: nat | i <= floor(h`length / 2) - 1):
	    i > 0 IMPLIES
	     h`length - 1 >= 0 AND h`length - 1 < h`length AND h`length - 1 >= i
	
	% Subtype TCC generated (at line 84, column 50) for  i - 1
	% expected type  {i_1: nat |
	%    i_1 <=
	%     floor(length(sink(h)(i, length(h) - 1)) / 2) - 1}
	  % proved
	heapify_TCC3: OBLIGATION
	FORALL (h: finite_sequence[T], i: nat | i <= floor(h`length / 2) - 1):
	    i > 0 IMPLIES
	     i - 1 >= 0 AND i - 1 <= floor(sink(h)(i, h`length - 1)`length / 2) - 1
	
	% Termination TCC generated (at line 84, column 15) for
	% heapify(sink(h)(i, length(h) - 1))(i - 1)
	  % proved
	heapify_TCC4: OBLIGATION
	FORALL (h: finite_sequence[T], i: nat | i <= floor(h`length / 2) - 1):
	    i > 0 IMPLIES i - 1 < i
	
	% Subtype TCC generated (at line 85, column 14) for  i
	% expected type  below[length(h)]
	  % proved
	heapify_TCC5: OBLIGATION
	FORALL (h: finite_sequence[T], i: nat | i <= floor(h`length / 2) - 1):
	    NOT i > 0 IMPLIES i < h`length
	
	% Subtype TCC generated (at line 85, column 17) for  length(h) - 1
	% expected type  {n: below[length(h)] | n >= i}
	  % proved
	heapify_TCC6: OBLIGATION
	FORALL (h: finite_sequence[T], i: nat | i <= floor(h`length / 2) - 1):
	    NOT i > 0 IMPLIES
	     h`length - 1 >= 0 AND h`length - 1 < h`length AND h`length - 1 >= i
	
	% Subtype TCC generated (at line 90, column 72) for  i
	% expected type  {i: nat | i <= floor(length(h) / 2) - 1}
	  % proved
	heapify_permutes_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], (i: below[floor(h`length / 2)])):
	    i <= floor(h`length / 2) - 1
	
	% The subtype TCC (at line 100, column 64) in decl nil for
	% term generated from heapify_length  i
	% expected type  {i: nat | i <= floor(h`length / 2) - 1}
	% Subtype TCC generated (at line 104, column 19) for
	% floor(length(h) / 2) - 1
	% expected type  {i: nat | i <= floor(length(h) / 2) - 1}
	  % proved
	heapify_heapifies_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T]
	              | h`length > 0 AND floor(h`length / 2) - 1 >= 0):
	    floor(h`length / 2) - 1 >= 0 AND
	     floor(h`length / 2) - 1 <= floor(h`length / 2) - 1
	
	% The subtype TCC (at line 100, column 64) in decl nil for
	 % term generated from heapify_length  i
	    % expected type  {i: nat | i <= floor(h`length / 2) - 1}
	  % is subsumed by heapify_permutes_TCC1
	
	% Subtype TCC generated (at line 110, column 28) for  0
	% expected type  below[length(h)]
	  % proved
	heapsort_aux_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], n: below[h`length]):
	    NOT n = 0 AND n = 1 IMPLIES 0 < h`length
	
	% Subtype TCC generated (at line 110, column 30) for  1
	% expected type  below[length(h)]
	  % proved
	heapsort_aux_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T], n: below[h`length]):
	    NOT n = 0 AND n = 1 IMPLIES 1 < h`length
	
	% Subtype TCC generated (at line 111, column 43) for  0
	% expected type  below[length(swap(h)(0, n))]
	  % proved
	heapsort_aux_TCC3: OBLIGATION
	FORALL (h: finite_sequence[T], n: below[h`length]):
	    NOT n = 0 AND NOT n = 1 IMPLIES 0 < swap[T, leq](h)(0, n)`length
	
	% Subtype TCC generated (at line 111, column 46) for  n - 1
	% expected type  {n_1: below[length(swap(h)(0, n))] | n_1 >= 0}
	  % proved
	heapsort_aux_TCC4: OBLIGATION
	FORALL (h: finite_sequence[T], n: below[h`length]):
	    NOT n = 0 AND NOT n = 1 IMPLIES
	     n - 1 >= 0 AND n - 1 < swap[T, leq](h)(0, n)`length AND n - 1 >= 0
	
	% Subtype TCC generated (at line 111, column 37) for  0
	% expected type  below[length(h)]
	  % proved
	heapsort_aux_TCC5: OBLIGATION
	FORALL (h: finite_sequence[T], n: below[h`length]):
	    NOT n = 0 AND NOT n = 1 IMPLIES 0 < h`length
	
	% Subtype TCC generated (at line 111, column 54) for  n - 1
	% expected type  below[length(sink(swap(h)(0, n))(0, n - 1))]
	  % proved
	heapsort_aux_TCC6: OBLIGATION
	FORALL (h: finite_sequence[T], n: below[h`length]):
	    NOT n = 0 AND NOT n = 1 IMPLIES
	     n - 1 >= 0 AND n - 1 < sink(swap[T, leq](h)(0, n))(0, n - 1)`length
	
	% Termination TCC generated (at line 111, column 11) for
	% heapsort_aux(sink(swap(h)(0, n))(0, n - 1))(n - 1)
	  % proved
	heapsort_aux_TCC7: OBLIGATION
	FORALL (h: finite_sequence[T], n: below[h`length]):
	    NOT n = 0 AND NOT n = 1 IMPLIES n - 1 < n
	
	% Subtype TCC generated (at line 135, column 21) for  n + 1
	% expected type  below[length(h)]
	  % proved
	heapsort_aux_psorts_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], (n: nat | n < h`length - 1)): n + 1 < h`length
	
	% Subtype TCC generated (at line 135, column 25) for  length(h) - 1
	% expected type  {j: below[length(h)] | 1 + n <= j}
	  % proved
	heapsort_aux_psorts_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T], (n: nat | n < h`length - 1)):
	    h`length - 1 >= 0 AND h`length - 1 < h`length AND 1 + n <= h`length - 1
	
	% Subtype TCC generated (at line 136, column 22) for  0
	% expected type  below[length(h)]
	  % proved
	heapsort_aux_psorts_TCC3: OBLIGATION
	FORALL (h: finite_sequence[T], (n: nat | n < h`length - 1)):
	    psorted(h)(n + 1, h`length - 1) IMPLIES 0 < h`length
	
	% Subtype TCC generated (at line 136, column 24) for  n
	% expected type  {j: below[length(h)] | 0 <= j}
	  % proved
	heapsort_aux_psorts_TCC4: OBLIGATION
	FORALL (h: finite_sequence[T], (n: nat | n < h`length - 1)):
	    psorted(h)(n + 1, h`length - 1) IMPLIES n < h`length AND 0 <= n
	
	% Subtype TCC generated (at line 137, column 41) for  i
	% expected type  below[length(h)]
	  % proved
	heapsort_aux_psorts_TCC5: OBLIGATION
	FORALL (h: finite_sequence[T], (n: nat | n < h`length - 1)):
	    psorted(h)(n + 1, h`length - 1) AND is_p_heap(h)(0, n) IMPLIES
	     FORALL (i: below[1 + n]): i < h`length
	
	% Subtype TCC generated (at line 138, column 32) for  n
	% expected type  below[length(h)]
	  % proved
	heapsort_aux_psorts_TCC6: OBLIGATION
	FORALL (h: finite_sequence[T], (n: nat | n < h`length - 1)):
	    (psorted(h)(n + 1, h`length - 1) AND
	      is_p_heap(h)(0, n) AND
	       FORALL (i: below[1 + n]):
	         leq(finseq_appl[T](h)(i), finseq_appl[T](h)(n + 1)))
	     IMPLIES n < h`length
	
	% The subtype TCC (at line 137, column 47) in decl nil for
	% term generated from heapsort_aux_psorts  n + 1
	% expected type  below[h`length]
	% Subtype TCC generated (at line 143, column 52) for  length(h) - 1
	% expected type  below[length(heapify(h)(floor(length(h) / 2) - 1))]
	  % proved
	heapsort_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T]):
	    h`length > 1 IMPLIES
	     h`length - 1 >= 0 AND
	      h`length - 1 < heapify(h)(floor(h`length / 2) - 1)`length
	
	% The subtype TCC (at line 137, column 47) in decl nil for
	 % term generated from heapsort_aux_psorts  n + 1
	    % expected type  below[h`length]
	  % is subsumed by heapsort_aux_psorts_TCC1
	
	% Subtype TCC generated (at line 143, column 27) for
	% floor(length(h) / 2) - 1
	% expected type  {i: nat | i <= floor(length(h) / 2) - 1}
	  % proved
	heapsort_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T]):
	    h`length > 1 IMPLIES
	     floor(h`length / 2) - 1 >= 0 AND
	      floor(h`length / 2) - 1 <= floor(h`length / 2) - 1

END heapsort_TCCS
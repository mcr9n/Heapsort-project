%% TCCs associated with theory sorting_seq
%% This file was automatically generated by PVS, please **do not modify** by hand.
sorting_seq_TCCS: THEORY BEGIN

	% Subtype TCC generated (at line 33, column 8) for  0
	% expected type  below[length(h)]
	  % proved
	occurrences_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], x: T): NOT h`length = 0 IMPLIES 0 < h`length
	
	% Subtype TCC generated (at line 33, column 41) for  length(h) - 1
	% expected type  nat
	  % proved
	occurrences_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T], x: T):
	    NOT h`length = 0 AND finseq_appl[T](h)(0) = x IMPLIES h`length - 1 >= 0
	
	% Termination TCC generated (at line 33, column 24) for
	% occurrences(h ^ (1, length(h) - 1))
	  % proved
	occurrences_TCC3: OBLIGATION
	FORALL (h: finite_sequence[T], x: T):
	    NOT h`length = 0 AND finseq_appl[T](h)(0) = x IMPLIES
	     (^[T](h, (1, h`length - 1)))`length < h`length
	
	% Subtype TCC generated (at line 35, column 18) for  length(h) - 1
	% expected type  nat
	  % proved
	occurrences_TCC4: OBLIGATION
	FORALL (h: finite_sequence[T], x: T):
	    NOT h`length = 0 AND NOT finseq_appl[T](h)(0) = x IMPLIES h`length - 1 >= 0
	
	% Termination TCC generated (at line 35, column 1) for
	% occurrences(h ^ (1, length(h) - 1))
	  % proved
	occurrences_TCC5: OBLIGATION
	FORALL (h: finite_sequence[T], x: T):
	    NOT h`length = 0 AND NOT finseq_appl[T](h)(0) = x IMPLIES
	     (^[T](h, (1, h`length - 1)))`length < h`length
	
	% Subtype TCC generated (at line 42, column 27) for  h`length - 1
	% expected type  nat
	  % proved
	finseq2list_rec_equivalence_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], i, k: below[h`length]):
	    i <= h`length - k IMPLIES h`length - 1 >= 0
	
	% Subtype TCC generated (at line 42, column 42) for  i
	% expected type  {n: nat | n <= length(h ^ (k, h`length - 1))}
	  % proved
	finseq2list_rec_equivalence_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T], i, k: below[h`length]):
	    i <= h`length - k IMPLIES i <= (^[T](h, (k, h`length - 1)))`length
	
	% Subtype TCC generated (at line 43, column 30) for  i
	% expected type  {n: nat | n <= length(h)}
	  % proved
	finseq2list_rec_equivalence_TCC3: OBLIGATION
	FORALL (h: finite_sequence[T], i, k: below[h`length]):
	    i <= h`length - k IMPLIES i <= h`length
	
	% Subtype TCC generated (at line 47, column 24) for  length(h) - 1
	% expected type  nat
	  % proved
	finseq2lists_for_suffixes_TCC1: OBLIGATION
	FORALL ((h: finite_sequence[T] | h`length > 0), i: below[h`length]):
	    h`length - 1 >= 0
	
	% Subtype TCC generated (at line 47, column 40) for  length(h) - i
	% expected type  {n: nat | n <= length(h ^ (i, length(h) - 1))}
	  % proved
	finseq2lists_for_suffixes_TCC2: OBLIGATION
	FORALL ((h: finite_sequence[T] | h`length > 0), i: below[h`length]):
	    h`length - i >= 0 AND h`length - i <= (^[T](h, (i, h`length - 1)))`length
	
	% Subtype TCC generated (at line 47, column 76) for  length(h) - i
	% expected type  {n: nat | n <= length(h)}
	  % proved
	finseq2lists_for_suffixes_TCC3: OBLIGATION
	FORALL ((h: finite_sequence[T] | h`length > 0), i: below[h`length]):
	    h`length - i >= 0 AND h`length - i <= h`length
	
	% Subtype TCC generated (at line 51, column 20) for  length(h) - 1
	% expected type  nat
	  % proved
	subseq_is_cdr_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T] | h`length > 0): h`length - 1 >= 0
	
	% Subtype TCC generated (at line 51, column 42) for  finseq2list(h)
	% expected type  (cons?[T])
	  % proved
	subseq_is_cdr_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T] | h`length > 0): cons?[T](finseq2list[T](h))
	
	% Subtype TCC generated (at line 105, column 52) for  k + 1
	% expected type  below[length(h)]
	  % proved
	psorted_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], i: below[h`length],
	          (j: below[h`length] | i <= j)):
	    NOT h`length = 0 IMPLIES
	     FORALL (k: below[h`length]):
	       i <= k AND k <= j - 1 AND NOT k < i IMPLIES k + 1 < h`length
	
	% Subtype TCC generated (at line 113, column 49) for  k + 1
	% expected type  below[length(h)]
	  % proved
	is_sorted?_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], k: below[h`length]):
	    0 <= k AND k <= h`length - 2 IMPLIES k + 1 < h`length
	
	% Subtype TCC generated (at line 124, column 31) for  floor((k - 1) / 2)
	% expected type  nat
	  % proved
	ind_parent_TCC1: OBLIGATION
	FORALL (k: posnat): floor((k - 1) / 2) >= 0
	
	% Subtype TCC generated (at line 135, column 56) for  ind_lc(i)
	% expected type  below[length(h)]
	  % proved
	left_child_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], i: nat | ind_lc(i) < h`length):
	    ind_lc(i) < h`length
	
	% Subtype TCC generated (at line 136, column 56) for  ind_rc(i)
	% expected type  below[length(h)]
	  % proved
	right_child_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], i: nat | ind_rc(i) < h`length):
	    ind_rc(i) < h`length
	
	% Subtype TCC generated (at line 142, column 11) for  below[length(h) - 1]
	% expected type  nat
	  % proved
	is_p_heap_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], i: below[h`length],
	          (j: below[h`length] | i <= j)):
	    h`length - 1 >= 0
	
	% Subtype TCC generated (at line 143, column 60) for  k
	% expected type  {i: below[length(h)] | i <= j}
	  % proved
	is_p_heap_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T], i: below[h`length],
	          (j: below[h`length] | i <= j), k: below[h`length - 1]):
	    NOT k < i AND k <= j IMPLIES k < h`length
	
	% Subtype TCC generated (at line 145, column 62) for  k
	% expected type  {i: nat | ind_lc(i) < length(h)}
	  % proved
	is_p_heap_TCC3: OBLIGATION
	FORALL (h: finite_sequence[T], i: below[h`length],
	          (j: below[h`length] | i <= j), k: below[h`length - 1]):
	    NOT k < i AND k <= j AND is_parent(h)(j, k) AND both_childs(h)(j, k)
	     IMPLIES ind_lc(k) < h`length
	
	% Subtype TCC generated (at line 145, column 96) for  k
	% expected type  {i: nat | ind_rc(i) < length(h)}
	  % proved
	is_p_heap_TCC4: OBLIGATION
	FORALL (h: finite_sequence[T], i: below[h`length],
	          (j: below[h`length] | i <= j), k: below[h`length - 1]):
	         (NOT k < i) AND (k <= j) AND is_parent(h)(j, k)
	     AND both_childs(h)(j, k) AND geq(finseq_appl[T](h)(k), left_child(h)(k))
	     IMPLIES ind_rc(k) < h`length
	
	% Subtype TCC generated (at line 146, column 84) for  k
	% expected type  {i: nat | ind_lc(i) < length(h)}
	  % proved
	is_p_heap_TCC5: OBLIGATION
	FORALL (h: finite_sequence[T], i: below[h`length],
	          (j: below[h`length] | i <= j), k: below[h`length - 1]):
	         (NOT k < i) AND (k <= j) AND is_parent(h)(j, k)
	     AND (NOT (both_childs(h)(j, k) AND
	                geq(finseq_appl[T](h)(k), left_child(h)(k)) AND
	                 geq(finseq_appl[T](h)(k), right_child(h)(k))))
	     AND one_child(h)(j, k)
	     IMPLIES ind_lc(k) < h`length
	
	% The subtype TCC (at line 144, column 56) in decl nil for
	% term generated from is_p_heap  k
	% expected type  {i: below[h`length] | i <= j}
	% The subtype TCC (at line 145, column 44) in decl nil for
	% term generated from is_p_heap  k
	% expected type  below[h`length]
	% The subtype TCC (at line 145, column 77) in decl nil for
	% term generated from is_p_heap  k
	% expected type  below[h`length]
	% The subtype TCC (at line 146, column 52) in decl nil for
	% term generated from is_p_heap  k
	% expected type  {i: below[h`length] | i <= j}
	% The subtype TCC (at line 146, column 66) in decl nil for
	% term generated from is_p_heap  k
	% expected type  below[h`length]
	% Subtype TCC generated (at line 148, column 48) for  0
	% expected type  below[length(h)]
	  % proved
	is_heap_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T]): NOT h`length = 0 IMPLIES 0 < h`length
	
	% The subtype TCC (at line 144, column 56) in decl nil for
	 % term generated from is_p_heap  k
	    % expected type  {i: below[h`length] | i <= j}
	  % is subsumed by is_p_heap_TCC2
	% The subtype TCC (at line 145, column 44) in decl nil for
	 % term generated from is_p_heap  k
	    % expected type  below[h`length]
	  % is subsumed by is_p_heap_TCC2
	% The subtype TCC (at line 145, column 77) in decl nil for
	 % term generated from is_p_heap  k
	    % expected type  below[h`length]
	  % is subsumed by is_p_heap_TCC2
	% The subtype TCC (at line 146, column 52) in decl nil for
	 % term generated from is_p_heap  k
	    % expected type  {i: below[h`length] | i <= j}
	  % is subsumed by is_p_heap_TCC2
	% The subtype TCC (at line 146, column 66) in decl nil for
	 % term generated from is_p_heap  k
	    % expected type  below[h`length]
	  % is subsumed by is_p_heap_TCC2
	
	% Subtype TCC generated (at line 148, column 51) for  length(h) - 1
	% expected type  {j: below[length(h)] | 0 <= j}
	  % proved
	is_heap_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T]):
	    NOT h`length = 0 IMPLIES
	     h`length - 1 >= 0 AND h`length - 1 < h`length AND 0 <= h`length - 1
	
	% Subtype TCC generated (at line 154, column 15) for  0
	% expected type  below[length(h)]
	  % proved
	root_is_greatest_in_p_heap_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], (n: below[h`length]), (i: below[1 + n])):
	    0 < h`length
	
	% Subtype TCC generated (at line 154, column 17) for  n
	% expected type  {j: below[length(h)] | 0 <= j}
	  % proved
	root_is_greatest_in_p_heap_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T], (n: below[h`length]), (i: below[1 + n])):
	    0 <= n
	
	% Subtype TCC generated (at line 154, column 35) for  i
	% expected type  below[length(h)]
	  % proved
	root_is_greatest_in_p_heap_TCC3: OBLIGATION
	FORALL (h: finite_sequence[T], (n: below[h`length]), (i: below[1 + n])):
	    is_p_heap(h)(0, n) IMPLIES i < h`length
	
	% The subtype TCC (at line 154, column 29) in decl nil for
	% term generated from root_is_greatest_in_p_heap  0
	% expected type  below[h`length]
	% Subtype TCC generated (at line 158, column 23) for  0
	% expected type  below[length(h)]
	  % proved
	root_is_greatest_in_heap_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], (i: below[h`length])):
	    is_heap(h) IMPLIES 0 < h`length
	
	% The subtype TCC (at line 154, column 29) in decl nil for
	 % term generated from root_is_greatest_in_p_heap  0
	    % expected type  below[h`length]
	  % is subsumed by root_is_greatest_in_p_heap_TCC1
	
	% Subtype TCC generated (at line 162, column 46) for  floor((k - 1) / 2)
	% expected type  below[length(h)]
	  % proved
	parent_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], k: posnat | k < h`length):
	    floor((k - 1) / 2) >= 0 AND floor((k - 1) / 2) < h`length
	
	% Subtype TCC generated (at line 166, column 65) for  i
	% expected type  {i: below[length(h)] | i <= n}
	  % proved
	ind_gc_TCC1: OBLIGATION
	FORALL (h, n: below[h`length], i: below[n + 1]): i < h`length AND i <= n
	
	% Subtype TCC generated (at line 167, column 53) for  i
	% expected type  {i: nat | ind_rc(i) < length(h)}
	  % proved
	ind_gc_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T], n: below[h`length],
	          (i: below[1 + n] | is_parent(h)(n, i))):
	    both_childs(h)(n, i) IMPLIES ind_rc(i) < h`length
	
	% Subtype TCC generated (at line 167, column 71) for  i
	% expected type  {i: nat | ind_lc(i) < length(h)}
	  % proved
	ind_gc_TCC3: OBLIGATION
	FORALL (h: finite_sequence[T], n: below[h`length],
	          (i: below[1 + n] | is_parent(h)(n, i))):
	    both_childs(h)(n, i) IMPLIES ind_lc(i) < h`length
	
	% The subtype TCC (at line 167, column 22) in decl nil for
	% term generated from ind_gc  i
	% expected type  {i: below[h`length] | i <= n}
	% Subtype TCC generated (at line 177, column 47) for  n
	% expected type  below[length(swap(h)(n, 0))]
	  % proved
	swap_of_p_heap_TCC1: OBLIGATION
	FORALL ((h: finite_sequence[T] | h`length > 0), (n: below[h`length]),
	          (i: below[n + 1])):
	    is_p_heap(h)(0, n) IMPLIES n < swap(h)(n, 0)`length
	
	% The subtype TCC (at line 167, column 22) in decl nil for
	 % term generated from ind_gc  i
	    % expected type  {i: below[h`length] | i <= n}
	  % is subsumed by ind_gc_TCC1
	
	% The subtype TCC (at line 177, column 22) in decl nil for
	% term generated from swap_of_p_heap  0
	% expected type  below[h`length]
	% The subtype TCC (at line 177, column 24) in decl nil for
	% term generated from swap_of_p_heap  n
	% expected type  {j: below[h`length] | 0 <= j}
	% The subtype TCC (at line 177, column 44) in decl nil for
	% term generated from swap_of_p_heap  0
	% expected type  below[h`length]
	% The subtype TCC (at line 177, column 53) in decl nil for
	% term generated from swap_of_p_heap  i
	% expected type  below[h`length]
	% Subtype TCC generated (at line 188, column 13) for  hp
	% expected type  finite_sequence[T]
	  % proved
	occ_replaces_at_j_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], (j: below[h`length]), (x, y: T),
	          hp: [# length: nat, seq: [below[h`length] -> T] #]):
	    hp =
	     (# length := h`length,
	        seq
	          := LAMBDA (k: below[h`length]):
	               IF k = j THEN x ELSE finseq_appl[T](h)(k) ENDIF #)
	     IMPLIES FORALL (x2: nat): x2 < h`length IFF x2 < hp`length
	
	% The subtype TCC (at line 177, column 22) in decl nil for
	 % term generated from swap_of_p_heap  0
	    % expected type  below[h`length]
	  % is subsumed by root_is_greatest_in_p_heap_TCC1
	% The subtype TCC (at line 177, column 24) in decl nil for
	 % term generated from swap_of_p_heap  n
	    % expected type  {j: below[h`length] | 0 <= j}
	  % is subsumed by root_is_greatest_in_p_heap_TCC2
	% The subtype TCC (at line 177, column 44) in decl nil for
	 % term generated from swap_of_p_heap  0
	    % expected type  below[h`length]
	  % is subsumed by root_is_greatest_in_p_heap_TCC1
	% The subtype TCC (at line 177, column 53) in decl nil for
	 % term generated from swap_of_p_heap  i
	    % expected type  below[h`length]
	  % is subsumed by root_is_greatest_in_p_heap_TCC3
	
	% Subtype TCC generated (at line 198, column 20) for  0
	% expected type  below[length(h)]
	  % proved
	swap_occ_at_0_TCC1: OBLIGATION
	FORALL (h: finite_sequence[T], (j: below[h`length] | j > 0), (x: T)):
	    0 < h`length
	
	% Subtype TCC generated (at line 198, column 29) for  length(h) - 1
	% expected type  nat
	  % proved
	swap_occ_at_0_TCC2: OBLIGATION
	FORALL (h: finite_sequence[T], (j: below[h`length] | j > 0), (x: T)):
	    h`length - 1 >= 0
	
	% Subtype TCC generated (at line 211, column 50) for  length(h) - 1
	% expected type  below[length(swap(h)(length(h) - 1, 0))]
	  % proved
	swap_of_heap_TCC1: OBLIGATION
	FORALL ((h: finite_sequence[T] | h`length > 0), (i: below[h`length])):
	    is_heap(h) IMPLIES
	     h`length - 1 >= 0 AND h`length - 1 < swap(h)(h`length - 1, 0)`length
	
	% Subtype TCC generated (at line 211, column 35) for  length(h) - 1
	% expected type  below[length(h)]
	  % proved
	swap_of_heap_TCC2: OBLIGATION
	FORALL ((h: finite_sequence[T] | h`length > 0), (i: below[h`length])):
	    is_heap(h) IMPLIES h`length - 1 >= 0 AND h`length - 1 < h`length
	
	% The subtype TCC (at line 211, column 47) in decl nil for
	% term generated from swap_of_heap  0
	% expected type  below[h`length]
	% Subtype TCC generated (at line 229, column 43) for  j
	% expected type  upto[length(delete(v, i))]
	  % proved
	delete_insert_same_permutes_TCC1: OBLIGATION
	FORALL (v: finite_sequence[T] | v`length > 0, i, j: below[v`length]):
	    j <= delete[T](v, i)`length
	
	% The subtype TCC (at line 211, column 47) in decl nil for
	 % term generated from swap_of_heap  0
	    % expected type  below[h`length]
	  % is subsumed by root_is_greatest_in_heap_TCC1

END sorting_seq_TCCS